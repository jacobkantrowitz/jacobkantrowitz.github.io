exprData$AGEcalc
# find indices of patients with key missing phenotype information
remove.pts <- numeric()
for(t in keyTraitsInd)
{
remove.pts <- append(remove.pts, which(is.na(pData(exprData)[,t])))
}
# find indices of patients who are never smokers (smoking = 3)
remove.pts <- append(remove.pts, which(exprData$SMKc==3))
# remove any non-unique indices from remove.pts
remove.pts <- unique(remove.pts)
remove.pts
sort(remove.pts)
remove.pts <- sort(unique(remove.pts))
remove.pts
sampleNumber <- function(exprSet)
{
return(dim(exprSet)[2])
}
traitNumber <- function(exprSet)
{
return(length(varLabels(exprSet)))
}
featureNumber <- function(exprSet)
{
return(dim(exprSet)[1])
}
sampleNumber(exprSet)
sampleNumber(exprData)
remove.pts
is.na(match(1:sampleNumber(exprData), remove.pts)
)
is.na(match(1:sampleNumber(exprData), remove.pts))
exprData[1,1:4]
remove.pts <- is.na(match(1:sampleNumber(exprData), remove.pts))
remove.pts
exprData2 <- exprData[,remove.pts]
exprData2
length(which(remove.pts==FALSE))
exprData
varLabels(exprData)
type
type <- c("factor", "factor", "factor", "numeric", "factor",
"factor", "numeric", "character")
type
character()
class(exprData[1,])
class(exprData$1
pData(exprData)
pData(exprData)[,1]
class(pData(exprData)[,1])
class(pData(exprData)[,2])
class(pData(exprData)[,3])
class(pData(exprData)[,4])
class(pData(exprData)[,5])
for(i in 1:59)
{
cat(i, varLabels(exprData)[i], class(pData(exprData)[,i]))
}
for(i in 1:59)
{
cat(i, varLabels(exprData)[i], class(pData(exprData)[,i]), "\n\n")
}
type <- c(c("RIN", "C"), c("BATCH", "F"))
type
type <- c(character("RIN", "C"), char("BATCH", "F"))
character("RIn", "C"(
)
)
list()
list(list("RIN", "c"), list("BATCH", "f"))
c(list("RIN", "c"), list("BATCH", "f"))
for(i in 1:59)
{
cat(i, varLabels(exprData)[i], class(pData(exprData)[,i]), "\n\n", sep=",")
}
tb
table()
for(i in 1:59)
{
paste(i, varLabels(exprData)[i], class(pData(exprData)[,i]), "\n", sep=",")
}
for(i in 1:59)
{
cat(i, varLabels(exprData)[i], class(pData(exprData)[,i]), "\n", sep=",")
}
for(i in 1:59)
{
cat(i, varLabels(exprData)[i], class(pData(exprData)[,i]), sep=",")
cat("\n")
}
exprData$PYc
exprData$XPY
exprData$SMKQUITc
exprData$SMKQUITMOc
numeric(exprData$SMKQUITMOc)
as.numeric(exprData$SMKQUITMOc)
exprData$SMKQUITYRc
exprData$LENGTHSMKQUITMOc
exprData$LENGTHSMKQUITUNCERTAINc
exprData$EXPOSUREc
exprData$HXCAc
exprData$PFTDATEc
exprData$RATIOc
exprData$FEV1c
exprData$FEV1Pc
exprData$FVCc
exprData$PFTs
exprData$R_LLN
exprData$COPD2LLN
exprData$OBS_LLN
exprData$RvsLLN
exprData$R7vsLLN
exprData$PRXc
exprData$AllegroBronchodi
exprData$PDXc
exprData$AllegroPDxOtherc
exprData$AllegroCOPDc
exprData$Bronchitisc
as.factor(exprData$Bronchitisc)
exprData$AllegroTBc
as.factor(exprData$Allegr
exprData$ANATOMYc
exprData$FINALDXc
exprData$DROP
exprData$DROP
as.factor(exprData$DROP)
summary(as.factor(exprData$DROP))
summary(as.factor(exprData$FinalCaDXc))
summary(as.factor(exprData$CA_CELL_TYPE))
summary(as.factor(exprData$CA_SUB_CELL_TYPE))
list.files()
load("newAnnotationClasses.txt")
load("newAnnotationClasses.txt", sep=",")
read.csv("newAnnotationClasses.txt", sep=",")
read.csv("newAnnotationClasses.txt", sep=",", head=FALSE)
read.csv("newAnnotationClasses.txt", sep=",", head=TRUE)
newClasses <- "/protected/projects/pulmarray/Allegro/COPD_Cancer/tmpNewOrganization/newAnnotationClasses.txt"
newClasses <- read.csv(newClasses, sep=",", head=TRUE)
newClass
newClasses
varLabels(exprData)
lbls
labels
?labels
labels(varLabels(exprData))
labels(exprData)
lbl
traitNumber(exprData)
type
newClass
newClasses
dim(newClasses)
class(pData(exprData)[,1])
10!=10
10==10
!(2+2)==)(2+3)
class(pData(exprData)[,1])!=newClasses[1,3]
class(pData(exprData)[,2])!=newClasses[2,3]
class(pData(exprData)[,3])!=newClasses[3,3]
for(i in 1:59)
{
cat(i, varLabels(exprData)[i], class(pData(exprData)[,i]), sep=",")
cat("\n")
}
coercePhenotypeFields <- function(exprData, type)
{
# COERCE DATA TO APPROPRIATE TYPES
lbls <- varLabels(exprData)
exprData2 <- exprData
# for each phenotype fields in exprData
for(i in 1:traitNumber(exprData))
{
# if the label being checked is the same label in the table at this index
if(lbls[i]==type[i,2])
{
# if the class of the label being checked is different than what it should be
if(class(pData(exprData)[,i])!=type[i,3])
{
# change the class of the label being checked to what it should be
if(type[i,3]=="factor")
{
cat("Changing trait ", type[i,2], " to factor\n", sep="")
pData(exprData2)[,i] <- as.factor(pData(exprData2)[,i])
}
else if(type[i,3]=="numeric")
{
cat("Changing trait ", type[i,2], " to numeric\n", sep="")
pData(exprData2)[,i] <- as.numeric(pData(exprData2)[,i])
}
else if(type[i,3]=="integer")
{
cat("Changing trait ", type[i,2], " to integer\n", sep="")
pData(exprData2)[,i] <- as.integer(pData(exprData2)[,i])
}
else if(type[i,3]=="character")
{
cat("Changing trait ", type[i,2], " to character\n", sep="")
pData(exprData2)[,i] <- as.character(pData(exprData2)[,i])
}
else
{
cat("ERROR: no class type name: ", type[i,3], "\n", sep="")
}
}
}
}
return(exprData2)
}
newClasses <- "/protected/projects/pulmarray/Allegro/COPD_Cancer/tmpNewOrganization/newAnnotationClasses.txt"
newClasses <- read.csv(newClasses, sep=",", head=TRUE)
exprData2 <- coercePhenotypeFields(exprData, newClasses)
for(i in 1:59)
{
cat(i, varLabels(exprData2)[i], class(pData(exprData2)[,i]), sep=",")
cat("\n")
}
for(i in 1:59)
{
cat(i, varLabels(exprData2)[i], class(pData(exprData)[,i]), class(pData(exprData2)[,i]),sep="  ")
cat("\n")
}
newClasses
newClasses[1,2]
class(newClasses[,2])
as.character(newClasses[1,2])
newClasses[1,3]
"character"==newClasses[1,3]
"numeric"==newClasses[1,3]
class(pData(exprData)[,1])
class(pData(exprData)[,1])==newClasses[1,3]
coercePhenotypeFields <- function(exprData, type)
{
# COERCE DATA TO APPROPRIATE TYPES
lbls <- varLabels(exprData)
exprData2 <- exprData
# for each phenotype fields in exprData
for(i in 1:traitNumber(exprData))
{
# if the label being checked is the same label in the table at this index
if(lbls[i]==type[i,2])
{
# if the class of the label being checked is different than what it should be
if(class(pData(exprData)[,i])!=type[i,3])
{
# change the class of the label being checked to what it should be
if(type[i,3]=="factor")
{
cat("Changing trait ", as.character(type[i,2]), " to factor\n", sep="")
pData(exprData2)[,i] <- as.factor(pData(exprData2)[,i])
}
else if(type[i,3]=="numeric")
{
cat("Changing trait ", as.character(type[i,2]), " to numeric\n", sep="")
pData(exprData2)[,i] <- as.numeric(pData(exprData2)[,i])
}
else if(type[i,3]=="integer")
{
cat("Changing trait ", as.character(type[i,2]), " to integer\n", sep="")
pData(exprData2)[,i] <- as.integer(pData(exprData2)[,i])
}
else if(type[i,3]=="character")
{
cat("Changing trait ", as.character(type[i,2]), " to character\n", sep="")
pData(exprData2)[,i] <- as.character(pData(exprData2)[,i])
}
else
{
cat("ERROR: no class type name: ", type[i,3], "\n", sep="")
}
}
}
}
return(exprData2)
}
newClasses <- "/protected/projects/pulmarray/Allegro/COPD_Cancer/tmpNewOrganization/newAnnotationClasses.txt"
newClasses <- read.csv(newClasses, sep=",", head=TRUE)
exprData2 <- coercePhenotypeFields(exprData, newClasses)
coercePhenotypeFields <- function(exprData, type)
{
# COERCE DATA TO APPROPRIATE TYPES
lbls <- varLabels(exprData)
exprData2 <- exprData
# for each phenotype fields in exprData
for(i in 1:traitNumber(exprData))
{
# if the label being checked is the same label in the table at this index
if(lbls[i]==type[i,2])
{
# if the class of the label being checked is different than what it should be
if(class(pData(exprData)[,i])!=type[i,3])
{
# change the class of the label being checked to what it should be
if(type[i,3]=="factor")
{
cat("Changing trait ", i, "-", as.character(type[i,2]), " to factor\n", sep="")
pData(exprData2)[,i] <- as.factor(pData(exprData2)[,i])
}
else if(type[i,3]=="numeric")
{
cat("Changing trait ", i, "-", as.character(type[i,2]), " to numeric\n", sep="")
pData(exprData2)[,i] <- as.numeric(pData(exprData2)[,i])
}
else if(type[i,3]=="integer")
{
cat("Changing trait ", i, "-", as.character(type[i,2]), " to integer\n", sep="")
pData(exprData2)[,i] <- as.integer(pData(exprData2)[,i])
}
else if(type[i,3]=="character")
{
cat("Changing trait ", i, "-", as.character(type[i,2]), " to character\n", sep="")
pData(exprData2)[,i] <- as.character(pData(exprData2)[,i])
}
else
{
cat("ERROR: no class type name: ", type[i,3], "\n", sep="")
}
}
}
}
return(exprData2)
}
exprData2 <- coercePhenotypeFields(exprData, newClasses)
apply
?apply
?sapply
expressionSet
class(exprData)
ExpressionSet
showMethods("ExpressionSet")
?ExpressionSet
experimentData(object=exprData)
expression(exprData)
?ExpressionSet
exprs(exprData)
exprData <- coercePhenotypeFields(exprData, newClasses)
exprData <- coercePhenotypeFields(exprData, newClasses)
m.d <- apply(exprs(exprData), 1, mean)
m.d
s.m.d <- sort(m.d, index.return=TRUE)
s.m.d
k.i <- s.m.d$ix[100:19684]
k.i
removePercentES <- function(exprData, percent, method)
{
# calculate the function (e.g. mean, coefficient of variance) for each gene
methodApplyData <- apply(exprs(exprData),1,method)
# sort and index the resulting function (e.g. mean) values
sortMethodData <- sort(methodApplyData, index.return = TRUE)
# find the index in the sorted indices for the cutoff
# i.e. if removing 25% of 10,000 genes, then the cutoff would be 2500
minInd <- percent*length(sortMethodData$ix)
# find the index of the gene that will be last to be included (i.e. last in the sort)
# i.e. if have 10,000 genes then this will be 10,000
maxInd <- length(sortMethodData$ix)
# pull the subset of gene indices that will be kept
# i.e. if keeping 2500/10000 genes these will be sorted.index[2500:10000]
keepInd <- sortMethodData$ix[minInd:maxInd]
# subset the original expressionSet and include only those genes above the cutoff,
# removing the desired percentage of the genes based on the sort method provided
exprs(exprData) <- exprs(exprData)[keepInd,]
#keep_data$ix <- sort_method_data$ix[min_ind:max_ind]
#keep_data$x <- sort_method_data$x[min_ind:max_ind]
return(exprData)
}
exprData2 <- removePercentES(exprData, .25, mean)
summary(exprData2)
exprData2
colnames(exprs(exprData2))
colnames(exprs(exprData2))==sampleNames(exprData)
colnames(exprs(exprData2))==rownames(pData(exprData2))
cof
coef
covar
cvar
filteringES <- function(dataToFilter, percent1=0.25, percent2=0.25)
{
cat("Filtering gene expression data...............\n")
dataFiltered <- dataToFilter
# MULTIPLE FILTERING METHODS
# 1. BY COEFFICIENT OF VARIANCE
cv <- removePercentES(dataToFilter, percent1, coefficient.of.variance)
cv.mn <- removePercentES(cv, percent2, mean)
# 2. BY MEAN
  mn <- removePercentES(dataToFilter, percent1, mean)
  mn.cv <- removePercentES(mn, percent2, coefficient.of.variance)
  
# 3. BY SUBJECT EXPRESSION LEVELS
  # STILL TO IMPLEMENT
# SET THE FILTERED SETS AS ATTRIBUTES OF UNFILTERED SET
attributes(dataFiltered) <- list("cv"=cv, "cv_mn"=cv.mn, "mn"=mn, "mn_cv"=mn.cv)
# RETURN UNFILTERED DATA WITH DIFFERENTLY FILTERED SETS AS ATTRIBUTES
return(dataFiltered)
}
exprData2 <- filteringES(exprData)
coefficient.of.variance <- function(x)
{
# coefficient.of.variance is a simple function that returns the coefficient of variance
# for a variable X (e.g. a data frame)
sd(x) / abs(mean(x))
}
exprData2 <- filteringES(exprData)
summary(exprData2)
exprData2$cv
exprData2
filteringES <- function(dataToFilter, percent1=0.25, percent2=0.25)
{
cat("Filtering gene expression data...............\n")
dataFiltered <- dataToFilter
# MULTIPLE FILTERING METHODS
# 1. BY COEFFICIENT OF VARIANCE
cv <- removePercentES(dataToFilter, percent1, coefficient.of.variance)
cv.mn <- removePercentES(cv, percent2, mean)
# 2. BY MEAN
  mn <- removePercentES(dataToFilter, percent1, mean)
  mn.cv <- removePercentES(mn, percent2, coefficient.of.variance)
  
# 3. BY SUBJECT EXPRESSION LEVELS
  # STILL TO IMPLEMENT
# SET THE FILTERED SETS AS ATTRIBUTES OF UNFILTERED SET
attributes(dataFiltered) <- list("cv"=cv, "cv_mn"=cv.mn, "mn"=mn, "mn_cv"=mn.cv)
# RETURN UNFILTERED DATA WITH DIFFERENTLY FILTERED SETS AS ATTRIBUTES
#return(dataFiltered)
return(list("cv"=cv, "cv_mn"=cv.mn, "mn"=mn, "mn_cv"=mn.cv))
}
exprDataFilt <- filteringES(exprData)
summary(exprDataFilt)
summary(exprDataFilt$cv)
filteringES <- function(dataToFilter, percent1=0.25, percent2=0.25)
{
cat("Filtering gene expression data...............\n")
dataFiltered <- dataToFilter
# MULTIPLE FILTERING METHODS
# 1. BY COEFFICIENT OF VARIANCE
cv <- removePercentES(dataToFilter, percent1, coefficient.of.variance)
cv.mn <- removePercentES(cv, percent2, mean)
# 2. BY MEAN
  mn <- removePercentES(dataToFilter, percent1, mean)
  mn.cv <- removePercentES(mn, percent2, coefficient.of.variance)
  
# 3. BY SUBJECT EXPRESSION LEVELS
  # STILL TO IMPLEMENT
# SET THE FILTERED SETS AS ATTRIBUTES OF UNFILTERED SET
attributes(dataFiltered) <- list("cv"=cv, "cv_mn"=cv.mn, "mn"=mn, "mn_cv"=mn.cv)
# RETURN UNFILTERED DATA WITH DIFFERENTLY FILTERED SETS AS ATTRIBUTES
#return(dataFiltered)
return(list("cv"=cv, "cv.mn"=cv.mn, "mn"=mn, "mn.cv"=mn.cv))
}
exprDataFilt <- filteringES(exprData) 
exprDataFilt
filteringES <- function(dataToFilter, percent1=0.25, percent2=0.25)
{
cat("Filtering gene expression data...............\n")
dataFiltered <- dataToFilter
# MULTIPLE FILTERING METHODS
# 1. BY COEFFICIENT OF VARIANCE
cv <- removePercentES(dataToFilter, percent1, coefficient.of.variance)
cv.mn <- removePercentES(cv, percent2, mean)
# 2. BY MEAN
  mn <- removePercentES(dataToFilter, percent1, mean)
  mn.cv <- removePercentES(mn, percent2, coefficient.of.variance)
  
# 3. BY SUBJECT EXPRESSION LEVELS
  # STILL TO IMPLEMENT
# Return unfiltered data along with differently filtered data sets
return(list("unfiltered"=dataToFilter, "cv"=cv, "cv.mn"=cv.mn, "mn"=mn, "mn.cv"=mn.cv))
}
 exprDataFilt <- filteringES(exprData) 
exprDataFilt
filteringES <- function(dataToFilter, percent1=0.25, percent2=0.25)
{
cat("Filtering gene expression data...............\n")
dataFiltered <- dataToFilter
# MULTIPLE FILTERING METHODS
# 1. BY COEFFICIENT OF VARIANCE
cv <- removePercentES(dataToFilter, percent1, coefficient.of.variance)
cv.mn <- removePercentES(cv, percent2, mean)
# 2. BY MEAN
  mn <- removePercentES(dataToFilter, percent1, mean)
  mn.cv <- removePercentES(mn, percent2, coefficient.of.variance)
  
# 3. BY SUBJECT EXPRESSION LEVELS
  # STILL TO IMPLEMENT
cat("Completed filtering\n")
# Return unfiltered data along with differently filtered data sets
return(list("unfiltered"=dataToFilter, "cv"=cv, "cv.mn"=cv.mn, "mn"=mn, "mn.cv"=mn.cv))
}
 exprDataFilt <- filteringES(exprData)
summary(exprDataFilt)
featureNumber <- function(exprSet)
{
return(dim(exprSet)[1])
}
featureNumber(exprDataFilt$cv)
featureNumber(exprDataFilt$cv.mv)
featureNumber(exprDataFilt$cv.mn)
rm(list=ls())
ls(
)
source("Allegro_Functions_v02.r")
source("Allegro_Analysis_v03.r")
history
history()
?history
ls
list.files()
setwd("results")
list.files()
list.files()
?history
savehistory("/2014-05-27/2014-05-27.Rhistory")
savehistory("2014-05-27/2014-05-27.Rhistory")
